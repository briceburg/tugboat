// Generated by CoffeeScript 1.8.0
var diffcontainer, identifyprimary, servicediff;

diffcontainer = function(container, service, image) {
  var additional, count, found, item, name, output, source, sourceCmd, target, targetCmd, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
  if (container.inspect.Image !== image.image.Id) {
    return 'Different image';
  }
  target = service.service.params;
  source = container.inspect;
  _ref = ['Entrypoint', 'User', 'Memory', 'WorkingDir'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    if (source.Config[name] !== target[name]) {
      return "" + name + " different - " + source.Config[name] + " -> " + target[name];
    }
  }
  if (source.Config.Domainname === 'false') {
    if (target.Domainname !== false) {
      return "Domainname different - " + source.Config.Domainname + " -> target.Domainname";
    }
  } else if (source.Config.Domainname !== target.Domainname) {
    return "Domainname different - " + source.Config.Domainname + " -> target.Domainname";
  }
  if ((target.Hostname != null) && source.Config.Hostname !== target.Hostname) {
    return "Domainname different - " + source.Config.Hostname + " -> target.Hostname";
  }
  _ref1 = ['Privileged', 'NetworkMode'];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    name = _ref1[_j];
    if (source.HostConfig[name] !== target.HostConfig[name]) {
      return "" + name + " different - " + source.HostConfig[name] + " -> " + target.HostConfig[name];
    }
  }
  sourceCmd = source.Config.Cmd.join(' ');
  targetCmd = target.Cmd.join(' ');
  if (sourceCmd !== targetCmd) {
    return "Cmd different - " + sourceCmd + " -> " + targetCmd;
  }
  additional = 0;
  _ref2 = source.Config.Env;
  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
    item = _ref2[_k];
    found = false;
    if (target.Env != null) {
      found = target.Env.filter(function(e) {
        return e === item;
      }).length !== 0;
    }
    if (!found) {
      if ((_ref3 = item.substr(0, 5)) !== 'PATH=' && _ref3 !== 'HOME=') {
        return "Env different - item -> 'not found'";
      }
      additional++;
    }
  }
  count = additional;
  output = "'not found'";
  if (target.Env != null) {
    count += target.Env.length;
    output = target.Env.join(', ');
  }
  if (source.Config.Env.length !== count) {
    return "Env different - " + (source.Config.Env.join(', ')) + " -> " + output;
  }
  return null;
};

identifyprimary = function(service, imagerepo) {
  var c, difference, image, result, tagname, _i, _len, _ref;
  if (!service.isknown) {
    return {
      messages: ["Unknown service " + service.name + ", restart everything"],
      keep: [],
      discard: service.containers,
      error: [],
      iserror: true
    };
  }
  tagname = service.service.params.Image;
  if (tagname.indexOf(':' === -1)) {
    tagname += ':latest';
  }
  if (imagerepo.tags[tagname] == null) {
    return {
      messages: ["Image '" + service.service.params.Image + "' not found"],
      keep: [],
      discard: [],
      error: service.containers,
      iserror: true
    };
  }
  image = imagerepo.tags[tagname];
  result = {
    messages: [],
    keep: [],
    discard: [],
    error: [],
    iserror: false
  };
  _ref = service.containers;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    c = _ref[_i];
    if (result.keep.length !== 0) {
      result.discard.push(c);
      continue;
    }
    difference = diffcontainer(c, service, image);
    if (difference == null) {
      result.keep.push(c);
    } else {
      console.log(difference);
      result.messages.push(difference);
      result.discard.push(c);
    }
  }
  return result;
};

servicediff = function(group, service, imagerepo) {
  var d, discard, e, error, iserror, k, keep, m, messages, result, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
  result = {
    messages: [],
    stop: [],
    rm: [],
    start: [],
    keep: [],
    error: [],
    create: 0,
    iserror: false
  };
  if (!service.isknown) {
    result.messages.push('Unknown service, starting anything that is stopped.');
    result.start = service.containers.filter(function(c) {
      return !c.inspect.State.Running;
    });
    return result;
  }
  _ref = identifyprimary(service, imagerepo), messages = _ref.messages, keep = _ref.keep, discard = _ref.discard, error = _ref.error, iserror = _ref.iserror;
  for (_i = 0, _len = keep.length; _i < _len; _i++) {
    k = keep[_i];
    if (!k.inspect.State.Running) {
      result.start.push(k);
    }
    result.keep.push(k);
  }
  for (_j = 0, _len1 = discard.length; _j < _len1; _j++) {
    d = discard[_j];
    if (d.inspect.State.Running) {
      result.stop.push(d);
    }
    result.rm.push(d);
  }
  for (_k = 0, _len2 = error.length; _k < _len2; _k++) {
    e = error[_k];
    result.error.push(e);
  }
  for (_l = 0, _len3 = messages.length; _l < _len3; _l++) {
    m = messages[_l];
    result.messages.push(m);
  }
  result.iserror = iserror;
  if (!result.iserror) {
    while (result.create + keep.length < 1) {
      result.create++;
    }
  }
  console.log("" + group.name + " " + service.name);
  console.log("  messages:");
  _ref1 = result.messages;
  for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
    m = _ref1[_m];
    console.log("    " + m);
  }
  console.log("  stop: " + result.stop.length);
  console.log("  rm: " + result.rm.length);
  console.log("  start: " + result.start.length);
  console.log("  keep: " + result.keep.length);
  console.log("  error: " + result.error.length);
  console.log("  create: " + result.create);
  console.log("  iserror: " + result.iserror);
  return result;
};

module.exports = function(imagerepo, groups) {
  var g, s, _, _ref;
  for (_ in groups) {
    g = groups[_];
    _ref = g.services;
    for (_ in _ref) {
      s = _ref[_];
      s.diff = servicediff(g, s, imagerepo);
    }
  }
  return groups;
};
