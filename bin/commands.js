// Generated by CoffeeScript 1.8.0
var ess, init_errors, series;

require('colors');

series = function(tasks, callback) {
  var next, result;
  tasks = tasks.slice(0);
  next = function(cb) {
    var task;
    if (tasks.length === 0) {
      return cb();
    }
    task = tasks.shift();
    return task(function() {
      return next(cb);
    });
  };
  result = function(cb) {
    return next(cb);
  };
  if (callback != null) {
    result(callback);
  }
  return result;
};

ess = function(num, s, p) {
  if (num === 1) {
    return s;
  } else {
    return p;
  }
};

init_errors = function(errors) {
  var e, err, index, _i, _j, _len, _len1, _ref;
  for (_i = 0, _len = errors.length; _i < _len; _i++) {
    e = errors[_i];
    console.error();
    console.error(("  " + e.path).red);
    _ref = e.errors;
    for (index = _j = 0, _len1 = _ref.length; _j < _len1; index = ++_j) {
      err = _ref[index];
      if (err.name == null) {
        console.error(err);
        continue;
      }
      if (err.name === 'YAMLException') {
        console.error("  " + (index + 1) + ") " + e.path + ":" + (err.mark.line + 1));
        console.error(err.message);
      } else if (err.name === 'TUGBOATFormatException') {
        console.error("  " + (index + 1) + ") " + err.message);
      } else {
        console.error("  " + (index + 1) + ") Unknown error:");
        console.error(err);
      }
    }
  }
  console.error();
  return process.exit(1);
};

module.exports = {
  status: function(tugboat) {
    return tugboat.init(function(errors) {
      var count;
      if (errors != null) {
        return init_errors(errors);
      }
      count = Object.keys(tugboat._groups).length;
      console.log();
      console.log("  " + (count.toString().green) + " group " + (ess(count, 'definition', 'definitions')) + " available.");
      return tugboat._docke.ping(function(err, isUp) {
        if ((err != null) || !isUp) {
          console.error();
          console.error('  docker is down'.red);
          console.error();
          return process.exit(1);
        } else {
          return tugboat._docke.ps(function(err, results) {
            var running, stopped;
            if ((err != null) || results.length === 0) {
              console.error();
              console.error('  There are no docker containers on this system'.magenta);
              console.error();
            } else {
              ess = function(num, s, p) {
                if (num === 1) {
                  return s;
                } else {
                  return p;
                }
              };
              running = results.filter(function(d) {
                return d.inspect.State.Running;
              }).length;
              stopped = results.length - running;
              console.error();
              console.error("  There " + (ess(running, 'is', 'are')) + " " + (running.toString().green) + " running container" + (ess(running, '', 's')) + " and " + (stopped.toString().red) + " stopped container" + (ess(stopped, '', 's')));
              console.error();
            }
            return process.exit(1);
          });
        }
      });
    });
  },
  test: function(tugboat) {
    return console.log('lul');
  }
};
