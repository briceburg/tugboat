// Generated by CoffeeScript 1.9.1
var init_errors, seq;

seq = require('../src/seq');

init_errors = require('./errors');

module.exports = function(tugboat, groupname, servicenames, usecache, callback) {
  return tugboat.init(function(errors) {
    var fn, group, groupnames, haderror, i, j, len, len1, name;
    if (errors != null) {
      return init_errors(errors);
    }
    console.log();
    if (Object.keys(tugboat._groups).length === 0) {
      console.error('  There are no groups defined in this directory'.magenta);
      console.error();
      process.exit(1);
    }
    groupnames = groupname == null ? Object.keys(tugboat._groups) : [groupname.replace('.yml', '')];
    haderror = false;
    for (i = 0, len = groupnames.length; i < len; i++) {
      name = groupnames[i];
      if (tugboat._groups[name] == null) {
        console.error(("  The group '" + name + "' is not available in this directory").red);
        console.error();
        haderror = true;
      }
    }
    if (haderror) {
      process.exit(1);
    }
    fn = function(name, group) {
      return seq(function(cb) {
        var _, config, fn1, k, l, len2, len3, ref, service, servicestoprocess;
        seq(function(cb) {
          console.log("  Building " + name.blue + "...");
          console.log();
          return cb();
        });
        servicestoprocess = [];
        if (servicenames.length !== 0) {
          haderror = false;
          for (k = 0, len2 = servicenames.length; k < len2; k++) {
            name = servicenames[k];
            if (group.services[name] == null) {
              console.error(("  The service '" + name + "' is not available in the group '" + group.name + "'").red);
              haderror = true;
            } else {
              servicestoprocess.push(group.services[name]);
            }
          }
          if (haderror) {
            process.exit(1);
          }
        } else {
          ref = group.services;
          for (_ in ref) {
            service = ref[_];
            servicestoprocess.push(service);
          }
        }
        fn1 = function(config) {
          if (config.build == null) {
            return;
          }
          return seq("" + config.pname.cyan, function(cb) {
            var results, run;
            results = '';
            run = function(message) {
              results += message;
              return results += '\n';
            };
            return tugboat.build(group, config, usecache, run, function(err) {
              if (err != null) {
                if (results.length !== 0) {
                  console.error(results);
                }
                return cb(err);
              }
              return cb();
            });
          });
        };
        for (l = 0, len3 = servicestoprocess.length; l < len3; l++) {
          config = servicestoprocess[l];
          fn1(config);
        }
        seq(function(cb) {
          console.log();
          return cb();
        });
        return cb();
      });
    };
    for (j = 0, len1 = groupnames.length; j < len1; j++) {
      name = groupnames[j];
      group = tugboat._groups[name];
      fn(name, group);
    }
    return seq(function(cb) {
      cb();
      if (callback != null) {
        return callback;
      }
    });
  });
};
